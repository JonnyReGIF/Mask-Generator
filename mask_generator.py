# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MaskGenerator
                                 A QGIS plugin
 helper to generate vector masks from tiled raster data 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Jonny
        email                : jonathan.renkel@web.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QStandardItemModel, QStandardItem
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QListView, QPushButton
from qgis.core import QgsProject, QgsVectorLayer, QgsRasterLayer, QgsDefaultValue
from qgis.utils import iface
from qgis.core import QgsVectorFileWriter

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .mask_generator_dialog import MaskGeneratorDialog
import os


class MaskGenerator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MaskGenerator_{}.qm'.format(locale))
        
        self.raster_files = []  # Initialize empty list for raster files
        self.current_file_index = 0  # Initialize index tracker
        self.outputDir = "" # Initialize output dir path
        self.vlayerOn  = QgsVectorLayer() # empty vlayer Obj 
        self.current_vName     = ""   # empty vlayer Name
        
        
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&mask_generator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MaskGenerator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)
        
        
        
        
        
        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/mask_generator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Mask Generator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&mask_generator'),
                action)
            self.iface.removeToolBarIcon(action)
            
    def display_files(self, rfileList):
        # Create a model
        model = QStandardItemModel()

        # Add each file path as an item to the model
        for file in rfileList:
            item = QStandardItem(file)
            model.appendRow(item)

        # Set the model to the listView
        self.dlg.listView.setModel(model)


    def select_input_dir(self):
        # Open a QFileDialog to select a directory
        directory = QFileDialog.getExistingDirectory(self.dlg, "Select Input Directory")
        print("test")
        # Check if a directory was selected
        if directory:
            # List all .tif files in the selected directory (full path)
            files = [os.path.join(directory, file) for file in os.listdir(directory) if file.endswith('.tif')]
            
        self.dlg.lineEdit_Input.setText(directory) #os.path.dirname(files[0])
        
        # Display the files in the QListView
        self.display_files(files)
        
        # Store the files in the class variable
        self.raster_files = files
        print(f"Found {len(files)} .tif files")
        
        return files

    def get_OutputDir(self):
        directory = QFileDialog.getExistingDirectory(self.dlg, "Select Input Directory")
        
        # set the selected outDir as txt 
        self.dlg.lineEdit_Input_OutPath.setText(directory)
        
        self.outputDir = directory
        
   
    def save_vector(self): # (self, layer, rfile)
                
        # get the vlayer
        layer = QgsProject.instance().mapLayersByName(self.current_vName)[0]
        
        # SaveVectorOptions contains many settings for the writer process

        save_options = QgsVectorFileWriter.SaveVectorOptions()
        transform_context = QgsProject.instance().transformContext()
        
        # Write to a GeoPackage (default)

        error = QgsVectorFileWriter.writeAsVectorFormatV3(layer,
                                                          os.path.join(self.outputDir, os.path.splitext(os.path.basename(self.current_vName))[0]),
                                                          transform_context,
                                                          save_options)
        
        if error[0] == QgsVectorFileWriter.NoError:

            print("success!")

        else:

          print(error)
        
    
    def display_raster(self, i, create = True):
        """Display the raster file and generate its vector mask."""
        
        print("printing form display_raster")
        
        #print(self.raster_files)
        
        if not self.raster_files or i >= len(self.raster_files):
            return
            
        raster_path = self.raster_files[i]
        
        # Load raster into QGIS
        iface.addRasterLayer(raster_path, os.path.basename(raster_path))
        
        if create:
            # Corrected to pass the correct number of arguments
            self.create_vector(raster_path)
        else:
            self.load_prev_vLayer(i)
        
        # Rlayer obj to extract the ext from 
        rlayer = QgsRasterLayer(raster_path, os.path.basename(raster_path))
        
        # center "Mapview" on Rlayer
        canvas = iface.mapCanvas()
        extent = rlayer.extent()
        canvas.setExtent(extent)
        canvas.refresh()
        
        
        self.current_file_index = i
        
        return i 

    def create_vector(self, file):
        """Create a vector layer from a raster file."""
        
        print("button pushed - Creating vector for raster:", file)
        
        file_name = os.path.splitext(os.path.basename(file))[0]
        
        self.current_vName = f'mask_{file_name}'
        
        # Define a temporary vector layer with a CRS and fields
        vlayer = QgsVectorLayer(
            "Polygon?crs=epsg:25832&field=id:integer&field=class:integer&field=uncertainty:integer",
            f'mask_{file_name}',
            "memory"
        )
        
        # add an auto-increment to the ID field
        # https://gis.stackexchange.com/questions/440051/pyqgis-autoincrement-id-field
        
        default_val = QgsDefaultValue(
                """
                CASE
                WHEN maximum("id") is NULL THEN 0
                WHEN "id" is NULL THEN maximum("id")+1
                ELSE "id"
                END
                """,
                applyOnUpdate=True)

        vlayer.setDefaultValueDefinition(vlayer.fields().lookupField('id'), default_val)


        
        self.vlayerOn = vlayer

        # Add vector layer to QGIS map canvas
        QgsProject.instance().addMapLayer(vlayer)
        vlayer.startEditing()
    
    def load_prev_vLayer(self, index):
       
        
        raster_path = self.raster_files[index]
        
        file_name = os.path.splitext(os.path.basename(raster_path))[0]
        path_to_vLayer = os.path.join(self.outputDir, f'mask_{file_name}.gpkg')  

        
        vlayer = QgsVectorLayer(path_to_vLayer, f'mask_{file_name}', "ogr")
        
        if vlayer.isValid():
            QgsProject.instance().addMapLayer(vlayer)
        else:
            pass
    
    def removeLayers(self):
    
        for layer in QgsProject.instance().mapLayers().values():
                QgsProject.instance().removeMapLayers( [layer.id()] )  
    
    
    def load_next_rlayer(self):
        
        # remove all currently loaded layers
        self.removeLayers()
        
        
        #self.raster_files = []  # Initialize empty list for raster files
        #self.current_file_index = 0  # Initialize index tracker
        
        self.current_file_index = self.current_file_index  + 1
        
        current_raster = self.raster_files[self.current_file_index]
        
        print(current_raster)
        print(current_raster)
        print(current_raster)
        
        self.display_raster(self.current_file_index)
        
    
    def load_prev_layers(self):
        
        # first clear all loaded layers
        self.removeLayers()
        
        prev_index = self.current_file_index - 1
        
        print("prev_index")
        print(prev_index)
        print(prev_index)
        print(prev_index)
        print("prev_index")
        

        
        
        self.display_raster(prev_index, create = False)
        #self.load_prev_vLayer(prev_index)

    
    
    
    def save_layer():
        pass
    
    
    '''
    def on_edit_command_ended(self):
    
        print("printing from: on_edit_command_ended")
    
    
        """Triggered when editing ends, opens a save dialog to save the vector layer."""
        if not self.vlayerOn:
            print("No active vector layer to save.")
            return

        # Finalize edits to the layer
        if self.vlayerOn.isEditable():
            self.vlayerOn.commitChanges()
            print("Edits committed successfully.")

        # Suggest a default file name based on the raster or vector layer name
        default_name = f"{self.vlayerOn.name().replace(' ', '_')}.shp"

        # Open Save File Dialog
        save_path, _ = QFileDialog.getSaveFileName(
            self.dlg,
            "Save Vector File",
            os.path.join(self.outputDir, default_name) if self.outputDir else default_name,
            "Shapefile (*.shp);;GeoJSON (*.geojson);;KML (*.kml);;GPKG (*.gpkg);;All Files (*)"
        )
        
        save_path = os.path.join(self.outputDir, f"{os.path.splitext(file_name)[0]}.shp")  
        
        print(save_path)
        print(save_path)
        print(save_path)
        print(save_path)
        print(save_path)
        print(save_path)
        
        if not save_path:
            print("Save operation canceled.")
            return

        # Determine the driver from the file extension
        file_extension = os.path.splitext(save_path)[-1].lower()
        driver_map = {
            ".shp": "ESRI Shapefile",
            ".geojson": "GeoJSON",
            ".kml": "KML",
            ".gpkg": "GPKG"
        }
        driver_name = driver_map.get(file_extension, "ESRI Shapefile")

        # Save the vector layer
        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = driver_name
        options.fileEncoding = "utf-8"
        

        
        save_context = QgsProject.instance().transformContext()
        
        error = QgsVectorFileWriter.writeAsVectorFormatV3(
            self.vlayerOn,
            save_path,
            save_context,
            options
        )
        
        if error == QgsVectorFileWriter.NoError:
            print(f"Vector layer saved successfully at {save_path}")
        else:
            print(f"Failed to save vector layer: {error}")
        '''   
            
     
        



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MaskGeneratorDialog() # open the GUI 
            self.dlg.toolButton_Input.clicked.connect(self.select_input_dir) # Fetch all layers from the user def. dir
            self.dlg.CreateVector1.clicked.connect(lambda: self.display_raster(self.current_file_index))
            self.dlg.toolButton_Input_2_Outpath.clicked.connect(self.get_OutputDir)
            self.dlg.pushButton_saveVlayer.clicked.connect(self.save_vector)
            self.dlg.pushBotton_nextRlayer.clicked.connect(self.load_next_rlayer)
            self.dlg.pushBotton_prevRlayer_2.clicked.connect(self.load_prev_layers)
            #self.dlg.toolButton_Output(self.save_vector()) # TEST IT --try to fetch the user dir
            #self.dlg.CreateVector.clicked(self.create_vector())
            
            self.vlayerOn.editCommandEnded.connect(lambda: self.on_edit_command_ended)
            

            
        # show the dialog
        self.dlg.show()
             
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            
            # Store the list of .tif files as an instance variable
            self.raster_files = self.select_input_dir()
            
            #active_vlayer = 
            print("Flist")
            print("Flist")
            print("Flist")
            print("Flist")
            
            
            if self.raster_files:
                print("Hello")
                self.display_raster(0)  # Display the first raster file
            
                # Connect edit end signal to save_vector function
                if self.vlayerOn:
                    #self.vlayerOn.editCommandEnded.connect(lambda: self.save_vector(self.vlayerOn, self.raster_files[self.current_file_index]))
                    print("fuck")
                    # Connect editCommandEnded signal to the save dialog function
                    self.vlayerOn.editCommandEnded.connect(lambda: self.on_edit_command_ended)
                    print("Connected editCommandEnded to on_edit_command_ended.")
            else:
                print("No self raster_files222222222222222222222222222222222222222222")
            
      
            
            

